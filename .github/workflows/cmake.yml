name: CMake

on:
  push:
    branches: 
    - master
    - conan
  pull_request:
    branches: 
    - master

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019, ubuntu-latest]
        include:
          - os: windows-2019
          - os: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Conan version
      run: echo "${{ steps.conan.outputs.version }}"

    - name: Install Conan Pkg's
      if: matrix.os == 'ubuntu-latest'
      run: conan install ${{github.workspace}} --output-folder=${{github.workspace}}/build --build=missing -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True

    - name: Configure CMake
      if: matrix.os == 'ubuntu-latest'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake

    - name: Build
      if: matrix.os == 'ubuntu-latest'
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ./test_archimedes


    # Wylaczone bo repo nie ma opcji "Environments"
    #- name: Using the builtin GitHub Cache Action for .conan
    #id: cache-conan
    #uses: actions/cache@v1
    #env:
    #  cache-name: cache-conan-modules
    #with:
    #  path: ${{ env.CONAN_USER_HOME }}
    #  key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('conanfile.py') }}
    #  restore-keys: ${{ runner.os }}-builder-${{ env.cache-name }}-
    #- name: Install GLFW
    #  run: |
    #      sudo apt update
    #      sudo apt install libglfw3 libglfw3-dev