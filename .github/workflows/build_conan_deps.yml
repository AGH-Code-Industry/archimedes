name: Build Archimedes & Conan dependencies, run tests

on:
  pull_request:
    branches: 
      - master

jobs:
  Linux:
    runs-on: ubuntu-latest

    env:
      CONAN_LOGIN_USERNAME: gh-actions
      CONAN_PASSWORD: ${{ secrets.CONAN_TOKEN }}
      CONAN_REMOTE_NAME: conan_coin
      CONAN_REMOTE_URL: https://artifactory.coin.agh.edu.pl/artifactory/api/conan/conan-local

    strategy:
      fail-fast: false
      matrix:
        compiler: [
            # gcc-13,
            gcc-14,
            # clang-18,
            # clang-19
          ]
        build_type: [Debug, Release, RelWithDebInfo]
        include:
          # - compiler: gcc-13
          #   cxx: g++-13
          - compiler: gcc-14
            cxx: g++-14
            profile_compiler: gcc
            profile_compiler_version: 14
            profile_compiler_libcxx: 'compiler.libcxx=libstdc++11'

          # - compiler: clang-18
          #   cxx: clang++-18
          # - compiler: clang-19
          #   cxx: clang++-19

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Wayland
        run: |
          sudo apt-get install -y libwayland-dev wayland-protocols libxkbcommon-dev libegl1-mesa-dev

      - name: Download Clang-19
        if: matrix.compiler == 'clang-19'
        run: |
          sudo apt-get install -y clang-19
          
      - name: Download Conan2
        run: pip install conan==2.*

      - name: Setup Conan
        run: |
          conan remote add $CONAN_REMOTE_NAME $CONAN_REMOTE_URL --force
          conan remote login $CONAN_REMOTE_NAME $CONAN_LOGIN_USERNAME -p $CONAN_PASSWORD

      - name: "Environment setup"
        run: |
          export CC=${{ matrix.compiler }}
          export CXX=${{ matrix.cxx }}
          conan profile detect --force

      - name: "${{ matrix.compiler }}, ${{ matrix.build_type }}: Build Conan dependencies"
        run: |
          cmake ${{ github.workspace }} -B ${{ github.workspace }}/build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DARCHIMEDES_FORCE_CONAN_INSTALL=TRUE -DCMAKE_C_COMPILER=${{ matrix.compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}
          cmake ${{ github.workspace }} -B ${{ github.workspace }}/build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DARCHIMEDES_FORCE_CONAN_INSTALL=TRUE -DCMAKE_C_COMPILER=${{ matrix.compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}
          conan cache clean

      - name: "${{ matrix.compiler }}, ${{ matrix.build_type }}: Build the Engine and run tests"
        run: |
          cmake --build ${{ github.workspace }}/build
          ${{github.workspace}}/build/archimedes_tests
          rm -rf ${{ github.workspace }}/build
      
      - name: "${{ matrix.compiler }}, ${{ matrix.build_type }}: Upload Conan dependencies to remote"
        run: |
          conan upload "*" --confirm -r $CONAN_REMOTE_NAME
      
      - name: "${{ matrix.compiler }}, ${{ matrix.build_type }}: Package archimedes"
        run: |
          echo "
          [settings]
          arch=x86_64
          build_type=${{ matrix.build_type }}
          compiler=${{ matrix.profile_compiler }}
          compiler.cppstd=23
          ${{ matrix.profile_compiler_libcxx }}
          compiler.version=${{ matrix.profile_compiler_version }}
          os=Linux
          " > ~/.conan2/profiles/archimedes
          conan create . --build=missing --profile:all=archimedes

  Windows:
    runs-on: windows-2025

    env:
      CONAN_LOGIN_USERNAME: gh-actions
      CONAN_PASSWORD: ${{ secrets.CONAN_TOKEN }}
      CONAN_REMOTE_NAME: conan_coin
      CONAN_REMOTE_URL: https://artifactory.coin.agh.edu.pl/artifactory/api/conan/conan-local

    strategy:
      fail-fast: false
      matrix:
        compiler: [
            # gcc-13,
            # gcc-14,
            # clang-18,
            # clang-19,
            # gcc, # gcc-14
            cl # msvc
          ]
        build_type: [Debug, Release, RelWithDebInfo]
        include:
          # - compiler: gcc-13
          #   cxx: g++-13
          # - compiler: gcc-14
          #   cxx: g++-14
          # - compiler: clang-18
          #   cxx: clang++-18
          # - compiler: clang-19
          #   cxx: clang++-19
          # - compiler: gcc
          #   cxx: g++
          - compiler: cl
            cxx: cl
            profile_compiler: msvc
            profile_compiler_version: 194


    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: ilammy/msvc-dev-cmd@v1
        if: matrix.compiler == 'cl'
        with:
          arch: x64
          
      - name: Download Conan2
        run: pip install conan==2.*

      - name: Setup Conan
        run: |
          conan remote add $env:CONAN_REMOTE_NAME $env:CONAN_REMOTE_URL --force
          conan remote login $env:CONAN_REMOTE_NAME $env:CONAN_LOGIN_USERNAME -p $env:CONAN_PASSWORD

      - name: "Environment setup"
        run: |
          $env:CC="${{ matrix.compiler }}"
          $env:CXX="${{ matrix.cxx }}"
          conan profile detect --force

      - name: "${{ matrix.compiler }}, ${{ matrix.build_type }}: Build Conan dependencies"
        run: |
          cmake ${{ github.workspace }} -B ${{ github.workspace }}/build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DARCHIMEDES_CONAN_ARGS="${{ matrix.compiler == 'gcc' && '-o nvrhi/*:with_dx11=False -o nvrhi/*:with_dx12=False' || '' }}" -DARCHIMEDES_FORCE_CONAN_INSTALL=TRUE -DCMAKE_C_COMPILER=${{ matrix.compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}
          cmake ${{ github.workspace }} -B ${{ github.workspace }}/build -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DARCHIMEDES_CONAN_ARGS="${{ matrix.compiler == 'gcc' && '-o nvrhi/*:with_dx11=False -o nvrhi/*:with_dx12=False' || '' }}" -DARCHIMEDES_FORCE_CONAN_INSTALL=TRUE -DCMAKE_C_COMPILER=${{ matrix.compiler }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}
          conan cache clean

      - name: "${{ matrix.compiler }}, ${{ matrix.build_type }}: Build the Engine and run tests"
        run: |
          cmake --build ${{ github.workspace }}/build
          ${{github.workspace}}/build/archimedes_tests
          Remove-Item -Path "${{ github.workspace }}\build" -Recurse -Force
      
      - name: "${{ matrix.compiler }}, ${{ matrix.build_type }}: Upload Conan dependencies to remote"
        run: |
          conan upload "*" --confirm -r $env:CONAN_REMOTE_NAME

      - name: "${{ matrix.compiler }}, ${{ matrix.build_type }}: Package archimedes"
        run: |
          echo '
          [settings]
          arch=x86_64
          build_type=${{ matrix.build_type }}
          compiler=${{ matrix.profile_compiler }}
          compiler.cppstd=23
          ${{ matrix.compiler == 'cl' && 'compiler.runtime=dynamic' || '' }}
          ${{ matrix.compiler == 'cl' && format('compiler.runtime_type={0}', matrix.build_type) || '' }}
          compiler.version=${{ matrix.profile_compiler_version }}
          os=Windows
          ' > ~/.conan2/profiles/archimedes
          conan create . --build=missing --profile:all=archimedes
          
#   windows:
#     runs-on: windows-2025

#     env:
#       CONAN_LOGIN_USERNAME: chris++
#       CONAN_PASSWORD: ${{ secrets.CONAN_TOKEN }}
#       CONAN_REMOTE_NAME: conan_coin
#       CONAN_REMOTE_URL: https://artifactory.coin.agh.edu.pl/artifactory/api/conan/conan-local

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
        
#       - name: Set up Conan2
#         run: pip install conan==2.*
          
#       - name: Test GCC & CMake
#         run: |
#           gcc --version
#           g++ --version
#           clang --version
#           clang++ --version
#           cmake --version
#           cmake --system-information -G "Visual Studio 17 2022" | sls "^CMAKE_(C|CXX)_COMPILER "
#           $env:CC="gcc"
#           $env:CXX="g++"
#           cmake --system-information -G "Ninja" | sls "^CMAKE_(C|CXX)_COMPILER "
#           conan profile detect --force
#           $env:CC="clang"
#           $env:CXX="clang++"
#           cmake --system-information -G "Ninja" | sls "^CMAKE_(C|CXX)_COMPILER "
#           conan profile detect --force
